@model KA.Web.Admin.ViewModels.Member.MemberViewModel

<style>
    .form-control[disabled], .form-control[readonly], fieldset[disabled] .form-control { color: #212121; }
    .jsgrid-grid-header { overflow-y: auto; }
    .jsgrid-grid-body { overflow-y: auto; }
</style>

<div class="row">
    <div class="col-lg-12">
        <div class="card card-default">
            <div class="card-header ">
                <div class="card-title">회원 정보 <span class="fs-12">- 괄호안의 데이터는 케이오피스 정보입니다.</span></div>
                @if (Model.member.ExcpTypCD != null && Model.member.ExcpTypCD.Equals("PAU"))
                {
                    <div style="color: blue;">- 현재 회원은 휴면 회원입니다. (휴면일자: @Model.member.ExcpRegDate)</div>
                }
            </div>
            <div class="card-body">
                <div class="row table-responsive-sm">
                    <table class="table table-sm">
                        <tbody>
                            <tr>
                                <td class="fw-700" style="width: 10%">회원유형</td>
                                <td style="width: 23%">@Model.member.TypeName<br />(@Model.memberKOffice.MemBizTypName)</td>
                                <td class="fw-700" style="width: 10%">고유번호</td>
                                <td style="width: 23%">@Model.member.Uid</td>
                                <td class="fw-700" style="width: 10%">고유번호(Koffice)</td>
                                <td style="width: 23%"><a href="@Config.KofficeDomain/Pages/Member/MemberView?mem_uid=@Model.member.KofficeUid" target="_blank">@Model.member.KofficeUid</a></td>
                            </tr>
                            <tr>
                                <td class="fw-700">ID</td>
                                <td>@Model.member.ID</td>
                                <td class="fw-700">이름</td>
                                <td>@Model.member.Name<br />(@Model.memberKOffice.MemName)</td>
                                <td class="fw-700">생년월일</td>
                                <td>@Model.member.BirthDate<br />(@Model.memberKOffice.BirthDate)</td>
                            </tr>
                            <tr>
                                <td class="fw-700">성별</td>
                                <td>@Model.member.SexName<br />(@Model.memberKOffice.Sex)</td>
                                <td class="fw-700">휴대전화</td>
                                @if (string.IsNullOrWhiteSpace(Model.member.Mobile))
                                {
                                    <td>
                                        <input type="text" id="mobile" />
                                        <input type="button" class="btn btn-sm" value="저장" onclick="save('mobile');" />
                                    </td>
                                }
                                else
                                {
                                    <td>@Model.member.Mobile<br />(등록전화:@Model.memberKOffice.RegTelNo/휴대전화:@Model.memberKOffice.HTel)</td>
                                }
                                <td class="fw-700">이메일</td>
                                @if (string.IsNullOrWhiteSpace(Model.member.Email))
                                {
                                    <td>
                                        <input type="text" id="email" />
                                        <input type="button" class="btn btn-sm" value="저장" onclick="save('email');" />
                                    </td>
                                }
                                else
                                {
                                    <td>@Model.member.Email<br />(@Model.memberKOffice.Email)</td>
                                }
                            </tr>
                            <tr>
                                <td class="fw-700">국가</td>
                                <td>@Model.member.CountryName<br />(@Model.memberKOffice.Countr)</td>
                                <td class="fw-700">가입일자</td>
                                <td>@Model.member.RegDate.ToString("yyyy-MM-dd HH:mm:ss")</td>
                                <td class="fw-700">최종접속일자</td>
                                <td>@(Model.member.LastLoginDate.ToString("yyyy-MM-dd").Equals("0001-01-01") ? "" : Model.member.LastLoginDate.ToString("yyyy-MM-dd HH:mm:ss"))</td>
                            </tr>
                            @if (LoginInfo.ContainAuth("MngMember"))
                            {
                                <tr>
                                    <td class="fw-700">응찰가능여부</td>
                                    <td>@Model.member.BidAllowYN</td>
                                    <td class="fw-700">임직원<br />* R은 관계자</td>
                                    <td colspan="3">@Model.member.ManagerYN @(Model.memberKOffice.EmployeeTypCd != null && Model.memberKOffice.EmployeeTypCd.Contains("00") ? $"[{Model.memberKOffice.EmployeeName}]" : "")</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                @if (Model.memberKOffice.MemUid < 1)
                {
                    <div class="row">
                        <div class="col-lg-12 m-t-20">
                            <div class="fs-700">[케이오피스 회원 정보에 해당 회원 정보가 존재하지 않습니다.]</div>
                        </div>
                    </div>
                }
                </div>
            <div class="card-footer">
                <button class="btn" onclick="window.location = '/Member/List';">회원 목록</button>
                @if (LoginInfo.ContainAuth("MngMember"))
                {
                    <button class="btn" onclick="openRetirePopup();">회원 탈퇴</button>
                }
                <button class="btn" onclick="initPassword('M');">비밀번호 초기화 (문자알림)</button>
                <button class="btn" onclick="initPassword('E');">비밀번호 초기화 (이메일알림)</button>
            </div>
        </div>
    </div>
    <div class="col-lg-12">
        <div class="card card-default">
            <div class="card-header">
                <div class="card-title">추가 정보</div>
            </div>
            <div class="card-body">
                <ul class="nav nav-tabs">
                    <li class="nav-item">
                        <a onclick="getAddressList();" class="nav-link active" data-toggle="tab" href="#tab-address">주소 정보</a>
                    </li>
                    <li class="nav-item">
                        <a onclick="getMobileAuthList();" class="nav-link" data-toggle="tab" href="#tab-mobile-auth">인증 내역</a>
                    </li>
                    <li class="nav-item">
                        <a onclick="getMemberLoginList();" class="nav-link" data-toggle="tab" href="#tab-connection-log">로그인 내역</a>
                    </li>
                    <li class="nav-item">
                        <a onclick="getMemberPasswordList();" class="nav-link" data-toggle="tab" href="#tab-password-change">비밀번호 변경 내역</a>
                    </li>
                    @if (LoginInfo.ContainAuth("MngAdmin"))
                    {
                        <li class="nav-item">
                            <a onclick="getSuccessfulBidList();" class="nav-link" data-toggle="tab" href="#tab-successful-bid">낙찰 내역</a>
                        </li>
                    }
                </ul>
                <div class="tab-content">
                    <div class="tab-pane fade show active" id="tab-address">
                        <div id="address-list" class="col-lg-12"></div>
                    </div>
                    <div class="tab-pane fade" id="tab-mobile-auth">
                        <div class="m-l-20 m-b-10">※ 최근 5회 내역입니다.</div>
                        <div id="mobile-auth-list" class="col-lg-12"></div>
                    </div>
                    <div class="tab-pane fade" id="tab-connection-log">
                        <div class="m-l-20 m-b-10">※ 최근 5회 내역입니다.</div>
                        <div id="member-login-list" class="col-lg-12"></div>
                    </div>
                    <div class="tab-pane fade" id="tab-password-change">
                        <div class="m-l-20 m-b-10">※ 최근 10회 내역입니다.</div>
                        <div id="member-password-list" class="col-lg-12"></div>
                    </div>
                    <div class="tab-pane fade" id="tab-successful-bid">                        
                        <div id="member-successful-bid-list" class="col-lg-12"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal fade slide-up" id="modal-retire" tabindex="-1" role="dialog" aria-labelledby="modalSlideUpLabel1" aria-hidden="false" style="z-index: 2000;">
    <div class="modal-dialog  modal-dialog-centered" style="display: flex;" role="document">
        <div class="modal-content">
            <div class="modal-body">
                <div class="px-3 pt-3 text-center">
                    <h3 class="pt-3">회원 탈퇴</h3>
                    <div class="form-group form-group-default required">
                        <textarea id="retire-reason" class="form-control h-100" placeholder="고객의 탈퇴 사유를 입력해 주세요." required></textarea>
                    </div>
                </div>
            </div>
            <div class="modal-footer text-md-right">
                <a onclick="setAdminRetire();" class="btn btn-primary" data-dismiss="modal" aria-label="Close">탈퇴</a>
                <a href="#" class="btn btn-cstm-secondary" data-dismiss="modal" aria-label="Close">취소</a>
            </div>
        </div>
    </div>
</div>

<script>

    var memUid = "@Model.member.Uid";
    var managerYn = "@Model.member.ManagerYN";
    var adminYn = "@Model.member.AdminYN";
    var memMobile = "@Model.member.Mobile";
    var memEmail = "@Model.member.Email";

    var newPwdType = "";
    var newPwdTarget = "";
    var newPwdValue = "";

    $(document).ready(function () {
        getAddressList();        

        $("#receivable").val($.stringUtils.comma($("#receivable").val()));
    });

    function getAddressList() {
        $.ajaxUtils.getApiData('/api/Member/GetAddressList/' + memUid.toString(), null, getAddressListComplete);
    }

    function getMobileAuthList() {
        $.ajaxUtils.getApiData('/api/Member/GetMobileAuthList/' + memUid.toString(), null, getMobileAuthListComplete);
    }

    function getMemberLoginList() {
        $.ajaxUtils.getApiData('/api/Member/GetMemberLoginList/' + memUid.toString(), null, getMemberLoginListComplete);
    }

    function getMemberPasswordList() {
        $.ajaxUtils.getApiData('/api/Member/GetMemberPasswordList/' + memUid.toString(), null, getMemberPasswordListComplete);
    }

    function getSuccessfulBidList() {
        $.ajaxUtils.getApiData('/api/Member/GetSuccessfulBidList/' + memUid.toString(), null, getSuccessfulBidListComplete);
    }

    function getAddressListComplete(result) {
        if ($.ajaxUtils.getResultCode(result) === "00") {
            $("#address-list").jsGrid({
                width: "100%",
                autoload: true,
                controller: {
                    loadData: function () {
                        return result.data
                    }
                },
                fields: [
                    {
                        name: "type_name", type: "text", title: "배송지명",
                        itemTemplate: function (_, item) {
                            return _ + (item.primary === "Y" ? " [기본]" : "");
                        }
                    },
                    { name: "zipcode", type: "text", title: "우편번호" },
                    { name: "address", type: "text", title: "주소" },
                    { name: "address2", type: "text", title: "상세주소" },
                    { name: "receiver", type: "text", title: "받는사람" },
                    { name: "contact", type: "text", title: "연락처" }
                ],
                noDataContent: "검색 결과가 없습니다.",
                loadMessage: "잠시만 기다려주세요...",
                loadIndication: true,
                loadIndicationDelay: 500,
                loadShading: true
            });
        } else {
            $("#address-list").html(result.message);
        }
    }

    function getMobileAuthListComplete(result) {
        if ($.ajaxUtils.getResultCode(result) === "00") {
            $("#mobile-auth-list").jsGrid({
                width: "100%",
                autoload: true,
                controller: {
                    loadData: function () {
                        return result.data
                    }
                },
                fields: [
                    { name: "type_name", type: "text", title: "인증유형" },
                    { name: "device_name", type: "text", title: "인증기기" },
                    { name: "auth_name", type: "text", title: "인증방식" },
                    {
                        name: "mobile_no", type: "text", title: "인증번호",
                        itemTemplate: function (_, item) { return item.auth == "C" ? item.crd_cd : item.mobile_co_name + " " + _; }
                    },
                    { name: "mem_name", type: "text", title: "이름" },
                    { name: "reg_date", type: "text", title: "인증일자" },
                    { name: "state_name", type: "text", title: "처리상태" }
                ],
                noDataContent: "검색 결과가 없습니다.",
                loadMessage: "잠시만 기다려주세요...",
                loadIndication: true,
                loadIndicationDelay: 500,
                loadShading: true
            });
        } else {
            $("#mobile-auth-list").html(result.message);
        }
    }

    function getMemberLoginListComplete(result) {
        if ($.ajaxUtils.getResultCode(result) === "00") {
            $("#member-login-list").jsGrid({
                width: "100%",
                autoload: true,
                controller: {
                    loadData: function () {
                        return result.data
                    }
                },
                fields: [
                    { name: "type_name", type: "text", title: "접속유형" },
                    { name: "reg_date", type: "text", title: "접속일자" },
                    { name: "user_agent", type: "text", title: "접속정보" }
                ],
                noDataContent: "검색 결과가 없습니다.",
                loadMessage: "잠시만 기다려주세요...",
                loadIndication: true,
                loadIndicationDelay: 500,
                loadShading: true
            });
        } else {
            $("#member-login-list").html(result.message);
        }
    }

    function getMemberPasswordListComplete(result) {
        if ($.ajaxUtils.getResultCode(result) === "00") {
            $("#member-password-list").jsGrid({
                width: "100%",
                autoload: true,
                controller: {
                    loadData: function () {
                        return result.data
                    }
                },
                fields: [
                    { name: "type_name", type: "text", title: "변경유형" },
                    {
                        name: "pwd_noti_value", type: "text", title: "알림정보",
                        itemTemplate: function (_, item) { return item.pwd_noti_target === "U" ? _ + "<br />(직접입력)" : _; }
                    },
                    { name: "user_agent", type: "text", title: "접속정보" },
                    { name: "reg_date", type: "text", title: "변경일자" }
                ],
                noDataContent: "검색 결과가 없습니다.",
                loadMessage: "잠시만 기다려주세요...",
                loadIndication: true,
                loadIndicationDelay: 500,
                loadShading: true
            });
        } else {
            $("#member-password-list").html(result.message);
        }
    }

    function getSuccessfulBidListComplete(result) {
        if ($.ajaxUtils.getResultCode(result) === "00") {
            $("#member-successful-bid-list").jsGrid({
                width: "100%",
                autoload: true,
                controller: {
                    loadData: function () {
                        return result.data
                    }
                },
                fields: [
                    { name: "auc_title", type: "text", title: "경매" },
                    { name: "lot_num", type: "text", title: "Lot", width: "30px" },
                    { name: "artist_name", type: "text", title: "작가명", width: "80px" },
                    {
                        name: "price_hammer", type: "text", title: "낙찰가", width: "60px",
                        itemTemplate: function (_, item) { return $.stringUtils.comma(_); }
                    },
                    {
                        name: "price_purchase", type: "text", title: "구매가", width: "60px",
                        itemTemplate: function (_, item) { return $.stringUtils.comma(_); }
                    },
                    { name: "bid_reg_date", type: "text", title: "응찰일자", width: "80px" },
                    {
                        name: "bid_reg_date", type: "text", title: "보증서 출력일시", width: "80px",
                        itemTemplate: function (_, item) { return item.certificate_print_yn === "Y" ? item.certificate_print_date : ''; }
                    }
                ],
                noDataContent: "검색 결과가 없습니다.",
                loadMessage: "잠시만 기다려주세요...",
                loadIndication: true,
                loadIndicationDelay: 500,
                loadShading: true
            });
        } else {
            $("#member-successful-bid-list").html(result.message);
        }
    }

    function openRetirePopup() {
        $("#modal-retire").modal('show');
    }

    function setAdminRetire() {
        if ($("#retire-reason").val() === "") {
            $.commonUtils.alert("탈퇴 사유를 입력하세요.");
        } else {
            var param = {};
            param["mem_uid"] = memUid;
            param["retire_reason"] = $("#retire-reason").val();
            $.ajaxUtils.getApiData('/api/Member/SetRetire/', param, setAdminRetireComplete);
        }
    }

    function setAdminRetireComplete(result) {
        if ($.ajaxUtils.getResultCode(result) === "00") {
            $.commonUtils.alert("탈퇴 처리하였습니다.");
            window.open("/Member/RetireList", "_self");
        } else {
            $.commonUtils.alert(result.message);
        }
    }

    function initPassword(type) {
        $(".modal-content-error").html('');

        var el = $("#modal-content");
        el.find('.modal-body').hide();
        el.find(".modal-header").html(type === 'E' ? "초기화 정보를 전송할 이메일을 선택하세요." : "초기화 정보를 전송할 전화번호를 선택하세요.");
        el.find("#btn-content-confirm").html("전송");
        el.find('.modal-content-body').hide();
        el.find('.modal-content-body-pwd-' + type).show();
        el.find('#pwd-reg-mobile').val(memMobile);
        el.find('#pwd-reg-mobile-disp').html(memMobile);
        el.find('#pwd-reg-email').val(memEmail);
        el.find('#pwd-reg-email-disp').html(memEmail);
        el.find('#btn-content-confirm').on("click", function () {            
            if (type === 'E') {
                var v = $('input:radio[name="rdoPwdEmail"]:checked').val();
                if (v === 'U' && $('#pwd-inp-email-val').val().replace(/ /ig, '') === '') {
                    $(".modal-content-error").html('전송할 이메일을 입력하세요.');
                    return false;
                }
                newPwdTarget = v === 'U' ? 'U' : 'A';
                newPwdValue = v === 'U' ? $('#pwd-inp-email-val').val() : v;
            }
            if (type === 'M') {
                var v = $('input:radio[name="rdoPwdMobile"]:checked').val();
                if (v === 'U' && $('#pwd-inp-mobile-val').val().replace(/ /ig, '') === '') {
                    $(".modal-content-error").html('전송할 전화번호를 입력하세요.');
                    return false;
                }
                newPwdTarget = v === 'U' ? 'U' : 'A';
                newPwdValue = v === 'U' ? $('#pwd-inp-mobile-val').val() : v;
            }
            newPwdType = type;
            initPasswordConfirm(type);
        });
        el.modal('show');
    }

    function initPasswordConfirm(type) {
        var notiTitle = type === "E" ? "비밀번호 초기화 (이메일알림)" : "비밀번호 초기화 (문자알림)";
        var notiDesc = type === "E" ? "비밀번호 초기화 후 변경 된 비밀번호를 고객님께 이메일 (" + newPwdValue + ")  알림 처리 하시겠습니까?"
            : "비밀번호 초기화 후 변경 된 비밀번호를 고객님께 문자 (" + newPwdValue + ") 알림 처리 하시겠습니까?";
        $.commonUtils.confirm(notiTitle, notiDesc, "initPasswordProc('" + type + "');");
    }

    function initPasswordProc(type) {
        var param = {};
        param["type"] = type;
        param["pwd_target"] = newPwdTarget;
        param["pwd_value"] = newPwdValue;
        param["mem_uid"] = memUid;
        var result = $.ajaxUtils.getApiData("/api/Member/initPassword", param, null, false);
        if ($.ajaxUtils.getResultCode(result) === "00") {
            $.commonUtils.alert("초기화 처리 후 문자/메일 발송되었습니다.", "success");
        } else {
            $.commonUtils.alert("처리중 오류가 발생하였습니다. 새로고침 후 다시 시도하시기 바랍니다.");
        }
    }

    function save(type) {
        if (type === "") return false;

        var param = {};
        param["mode"] = "UPDATE_" + type.toUpperCase();
        param["mem_uid"] = memUid;
        param[type] = $("#" + type).val();
        var result = $.ajaxUtils.getApiData("/api/Member/SetMemberAdmin", param, null, false);
        if ($.ajaxUtils.getResultCode(result) === "00") {
            window.location.reload();
        } else {
            $.commonUtils.alert("처리중 오류가 발생하였습니다. 새로고침 후 다시 시도하시기 바랍니다.");
        }
    }

</script>