<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="06017 서울특별시 강남구 언주로 172길 23 아트타워" xml:space="preserve">
    <value>23, Eonju-ro 172-gil, Gangnam-gu, Seoul 06017, Republic of Korea</value>
    <comment>[Login] 5. Image Info - #4</comment>
  </data>
  <data name="당신의 소장품에 가치를 더하다" xml:space="preserve">
    <value>Adding value to your collection</value>
    <comment>[Login] 5. Image Info - #1</comment>
  </data>
  <data name="대한민국 대표 경매회사" xml:space="preserve">
    <value>Korea Premier Auction</value>
    <comment>[Login] 5. Image Info - #2</comment>
  </data>
  <data name="로그인" xml:space="preserve">
    <value>Login</value>
    <comment>[Login] 3. Button</comment>
  </data>
  <data name="로그인 상태 유지" xml:space="preserve">
    <value>Keep me logged in</value>
    <comment>[Login] 2. Field</comment>
  </data>
  <data name="문의 02-3479-8888" xml:space="preserve">
    <value>T. +82 2 3479 8888</value>
    <comment>[Login] 5. Image Info - #5</comment>
  </data>
  <data name="비밀번호" xml:space="preserve">
    <value>Password</value>
    <comment>[Login] 2. Field</comment>
  </data>
  <data name="비밀번호를 입력해 주십시오." xml:space="preserve">
    <value>Please enter your password</value>
    <comment>[Login] 6. Validation - 비밀번호 미입력</comment>
  </data>
  <data name="비밀번호찾기" xml:space="preserve">
    <value>Forgot your password?</value>
    <comment>[Login] 4. Link</comment>
  </data>
  <data name="아이디" xml:space="preserve">
    <value>ID</value>
    <comment>[Login] 2. Field</comment>
  </data>
  <data name="아이디/비밀번호 찾기" xml:space="preserve">
    <value>Don't remember your ID/password?</value>
    <comment>[Login] 4. Link</comment>
  </data>
  <data name="아이디를 입력해 주십시오." xml:space="preserve">
    <value>Please enter your ID</value>
    <comment>[Login] 6. Validation - 아이디 미입력</comment>
  </data>
  <data name="아이디찾기" xml:space="preserve">
    <value>Forgot your ID?</value>
    <comment>[Login] 4. Link</comment>
  </data>
  <data name="케이옥션" xml:space="preserve">
    <value>K Auction</value>
    <comment>[Login] 5. Image Info - #3</comment>
  </data>
  <data name="팩스 02-3479-8889" xml:space="preserve">
    <value>F. +82 2 3479 8889</value>
    <comment>[Login] 5. Image Info - #6</comment>
  </data>
  <data name="회원 로그인" xml:space="preserve">
    <value>Login</value>
    <comment>[Login] 1. Title</comment>
  </data>
  <data name="회원가입" xml:space="preserve">
    <value>Join</value>
    <comment>[Login] 4. Link</comment>
  </data>
</root>